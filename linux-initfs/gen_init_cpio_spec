#!/usr/bin/perl
use warnings;
use strict;
#
# gen_init_cpio_spec - spit out what the kernel needs to build-in an
#                      initfs that can find and mount any kind of
#                      root filesystem the same kernel can support
#
# outline:
#
#   1. Load the kernel config.
#       a. Identify our parent process
#       b. If it's make, investigate what makefile
#       c. Find the kernel source from there
#       d. Otherwise, assume /usr/src/linux
#	2. Check for which supported features are compiled-in
#       a. Allow the subclasses to include things
#   3. Spit out the results
#       b. By calling the collection of objects' class

use Linux::InitFS;
use Linux::InitFS::Kernel;

# create a context
my $ctx = Linux::InitFS->new;

# pick up globals and defaults
$ctx->cfg->import_initfs_config;

# go looking for the current kernel tree if any
my $here = detect_kconfig_here
	or die "We are not being run from a kernel source tree.\n";

# pick up tree-specific values
$ctx->cfg->import_initfs_config( $here );

# import the kernel config
$ctx->cfg->import_kernel_config( $here )
	or die "Unable to import Kconfig, have you run make menuconfig?";

# see that we're in any way useful
$ctx->cfg->kernel_feature_enabled( 'BLK_DEV_INITRD' )
	or die "Initial root filesystems are disabled.\n";

# go looking for features
$ctx->analyze_enabled_features
	or die "Error while analyzing enabled initfs features.\n";

# spit it out...
my $rv = $ctx->generate_cpio_spec;

exit( $rv ? 0 : 1 );
