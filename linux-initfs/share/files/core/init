#!/bin/bash

###############################################################################
# capture boot process for troubleshooting

exec 2>/run/initfs.trc
set -x


###############################################################################
# program variables

ROOTMNT='/mnt/rootfs'
INITBIN='/sbin/init'
ROOTDEV='LABEL=root'
MNTFLAG='ro'

GETARGS=(get_arg_core)


###############################################################################
# import kernel command line

get_arg_core() {
	local arg="$1"

	case $arg in

		ro)
			MNTFLAG=ro
			;;
		rw)
			MNTFLAG=rw
			;;

		root=*)
			ROOTDEV=${arg#root=}
			;;

		rootflags=*)
			ROOTFLG=${arg#rootflags=}
			;;

		init=*)
			INITBIN=${arg#init=}
			;;

	esac
}

import_cmdline() {
	local arg func

	for arg in $(cat /proc/cmdline)
	do
		for func in ${GETARGS[@]}
		do
			$func $arg
		done
	done

}


###############################################################################
# ensure the root device is accessible

# try it
mount_rootfs() {
	local flag

	flag=$MNTFLAG

	if [[ -n $ROOTFLG ]]
	then
		flag="${flag},${ROOTFLG}"
	fi

	mount -o $flag $ROOTDEV $ROOTMNT

	return $?
}

# probe it
load_rootdev() {
	local f

	for f in /etc/load.d/*.sh
	do
		[[ -r $f ]] && source $f
		is_rootfs_mounted && break
	done

}

# test for it
is_rootfs_mounted() {
	grep -q $ROOTMNT /etc/mtab
}

# if we have no rootfs
rootfs_not_mounted() {
	echo
	echo
	echo *** FATAL ***
	echo
	echo Unable to locate root filesystem.
	echo Halting system.
	echo
	echo
	/sbin/halt -f   # try to go quietly
	exit            # give up, kernel panic
}


###############################################################################
# MAIN BLOCK

for f in /etc/init.d/*.sh
do
	[[ -r $f ]] && source $f
done
unset f

import_cmdline

mount_rootfs 2> /dev/null

if ! is_rootfs_mounted
then
	load_rootdev
fi

if ! is_rootfs_mounted
then
	mount_rootfs
fi

if ! is_rootfs_mounted
then
	rootfs_not_mounted
fi

for f in /etc/done.d/*.sh
do
	[[ -r $f ]] && source $f
done
unset f

exec chroot $ROOTMNT $INITBIN
